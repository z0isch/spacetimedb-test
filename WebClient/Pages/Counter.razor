@page "/counter"
@using SpacetimeDB
@using SpacetimeDB.Types
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject ServerApi ServerApi
@inject StaticAssetService StaticAssetService
@inject HttpClient Http
@inject EventService EventService

<PageTitle>Web Chat</PageTitle>

<h1>Web Chat</h1>
<button @onclick="() => EventService.EnqueueEvent(new MyTurn())"
    _="on MyTurn from elsewhere add .grow wait for animationend then remove .grow">My
    Turn
</button>
@if (StaticAssets != null)
{
    <p>@StaticAssets.Value.Words[0]</p>
    <p>@StaticAssets.Value.SubstringsOrderedByFrequency[0].Substring -
        @StaticAssets.Value.SubstringsOrderedByFrequency[0].Frequency</p>
}
@if (ServerApi.DbConnection?.IsActive ?? false)
{
    <h2>@ServerApi.DbConnection.Identity</h2>
    <ul>
        @foreach (var playerState in PlayerStates)
        {
            <li>
                @if (playerState.Key == ServerApi.DbConnection.Identity)
                {
                    <input @bind="@CurrentTyping" @bind:event="oninput" @bind:after="@HandleKeyDown" />
                }
                else
                {
                    <input @bind="@playerState.Value.Typing" disabled />
                }
            </li>
        }
    </ul>
}
else
{
    <h2>Loading...</h2>
}

@code {
    public Dictionary<Identity, PlayerState> PlayerStates => ServerApi.PlayerStates;
    public StaticAssets? StaticAssets { get; set; }
    private string CurrentTyping { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var tokenFromLocalStorage = await JS.InvokeAsync<string?>("localStorage.getItem", "token");
        ServerApi.Run(tokenFromLocalStorage, (token) =>
        {
            var _t = JS.InvokeVoidAsync("localStorage.setItem", "token", token);
        }, () => StateHasChanged());
        StaticAssets = await StaticAssetService.GetStaticAssets(Http);
        EventService.Initialize(JS);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("eval", "_hyperscript.processNode(document)");
    }

    private void HandleKeyDown()
    {
        ServerApi.SetTyping(CurrentTyping);
    }

}